## 一、项目简介及系统结构

​	系统管理：用户管理、菜单管理、角色管理等模块

​				假期模块能扩展

​	使用jQuery框架完成了动态功能

​	菜单管理模块：用来管理可操作的功能菜单

​	角色管理模块：用来分配角色的权限

​	用户管理模块：项目开发的增删改查 

​					CRUD Create Retrieve Update Delete

​	

1. 系统功能介绍

   1. 用户管理功能：添加用户，查询用户，删除用户，修改用户，激活或冻结用户状态。
   2. 菜单管理功能：添加菜单，删除菜单，修改菜单，查看下级菜单。
   3. 角色管理功能：添加角色，删除角色，修改角色，绑定角色(赋予用户角色)，绑定用户操作(赋予用户可操作的功能模块)。
   4. 所有查询页面都进行了分页处理。

2. 相关技术介绍

   ​	其中涉及的技术有Spring、SpringMVC、持久层技术JPA和表现层技术 jQuery和BootStrap，将JSP作为表现层技术。

   1. 传统表现层技术：JSP。使用JSP作为表现层，**负责收集用户请求数据以及业务数据的表示**。

      结合 **EL表达式** 和 **JSTL标签库** ，JSP能完成全部的表现层功能——数据收集，数据表示。

   2. MVC框架

      ​	使用**SpringMVC**作为 **MVC **框架。本应用的所有JSP页面的请求，包括系统的超链接和表单提交，都不再直接发送到表现层JSP页面，而是发送给 **SpringMVC**的**Controller**, **SpringMVC**控制所有的请求的处理和转发。

      ​	通过Controller拦截所有请求有个好处，将所有的JSP页面放入到 WEB-INF/路径下，可以避免用户直接访问JSP页面，从而提高系统的安全性。

   3. Spring框架的作用

      ​	Spring框架是系统的核心部分，Spring提供的IOC容器是业务逻辑组件和DAO组件的工厂，负责生产并管理这些实例。

      ​	借助于Spring的 **依赖注入** ，各组件以松耦合的方式组合在一起，组件与自己之间的依赖正是通过Spring的依赖注入管理的。其Service组件和DAO对象都采用了面向接口编程方式，从而降低了系统架构的成本，极好地提高了系统的可维护性、可扩展性。

      ​	应用事务采用Spring的注解式事务，通过注解式事务，使业务逻辑组件可以更加专注于业务的实现，从而简化开发。

   4. JPA的作用

      ​	JPA简化了数据库的访问，持久层只需要提供接口声明，而不需要提高任何实现。大大减轻了开发者的工作量，提高了工作效率。

3. 系统结构

   1. 表现层：由JSP页面组成
   2. 控制层：使用springMVC技术
   3. 业务层：主要由Spring IoC容器管理的业务逻辑组件组成
   4. 持久层：由6个Repository(也可以叫做DAO)组件组成
   5. 领域对象层：由6个Domain Object对象组成
   6. 数据库服务层：使用MySQL数据库存储持久化数据

4. 系统的功能模块

   ​	系统管理模块：用户管理、菜单管理、角色管理

   1. 主要业务逻辑通过IdentityService业务逻辑组件实现，通过该组件来封装Repository.
   2. 六个Repository对象
      1. UserRepository :对 oa_id_user表的基本操作
      2. DeptRepository:对 oa_id_dept表的基本操作
      3. JobRepository : 对 oa_id_job表的基本操作
      4. ModuleRepository: 对oa_id_module表的基本操作
      5. RoleRepository: 对 oa_id_role表的基本操作
      6. PopedomRepositor :对oa_id_popedom表的基本操作
   3. IdentityService :提供所有的业务逻辑功能的实现。
